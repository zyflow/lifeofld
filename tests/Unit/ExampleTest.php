<?php

namespace Tests\Unit;

use App\Citizens;
use App\Console\Commands\UpdateDateNotifications;
use App\Communes;
use App\Projects;
use App\ProjectStatusSetting;
use App\User;
use Carbon\Carbon;
use Tests\TestCase;

class ExampleTest extends TestCase
{
	private $project;

	public function setUp()
	{
		parent::setUp(); // TODO: Change the autogenerated stub
		$this->deleteProjects();
	}

	public function tearDown()
	{
		parent::tearDown(); // TODO: Change the autogenerated stub
	}

	public function deleteProjects()
	{
		$allProjects = Projects::all();
		foreach ($allProjects as $project)
		{
			$project->delete();
		}
	}



    public function createProject()
	{
		$project = Projects::create([
											'citizen_id' => Citizens::first()->id,
											'user_id' => 777,
											'kommune_id' => Communes::first()->id,
											'manager_id' => User::first()->id,
											'project_status_settings_id' => ProjectStatusSetting::first()->id,
									]);

		$this->project = Projects::where('id', $project->id)->with('latestDate')->first();

		return $this->project;
	}


	/**
	 * @test
	 *
	 *      1. Call same as cron and artisan
	 *      2. Unit test every method ?
	 *     	3. check if
	 *
	 */
	public function testGetLastStatus()
	{
		request()->merge(['date' => Carbon::now()]);
		$this->createProject();
		$this->assertEquals(1, Projects::count());
		sleep(1);
		$this->project->update([
				'status_date' => '2019-01-16',
				'date' => '2019-01-16',
				'created_at' => Carbon::now()->addMinutes(6)->toDateTimeString(),
				'project_status_settings_id' => ProjectStatusSetting::where('order_no', 2)->first()->id
							 ]);

		$this->assertCount(2, $this->project->dates);

		$dateNotifications = new UpdateDateNotifications();
		$dateNotifications->handle();
	}

}
